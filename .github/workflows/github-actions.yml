name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: isort
        run: isort --check .
      - name: black
        run: black --check .

      # - name: Test with pytest
      # - run: pytest
  #     - run: |
  #         sudo apt-get update
  #         sudo apt-get install -y poppler-utils python3-psycopg2 python3-pygraphviz graphviz graphviz-dev libgraphviz-dev
  #         python3 -m venv ../venv
  #         . ../venv/bin/activate
  #         pip install -r requirements/dev.txt
  #     - run: |
  #         . ../venv/bin/activate
  #         mkdir -p ~/workspace/test-reports
  #         export SECRET_KEY=notsecret
  #         export DATABASE_URL='postgis://postgres:postgres@localhost/ci'
  #         export CELERY_BROKER_URL="N/A"
  #         export CELERY_RESULTS_URL="N/A"
  #         export URL="http://localhost"
  #         export FRONT_URL="http://app.localhost"
  #         export BRANCHIO_KEY="key_test_pmEf8Pqmg05t4N1MamZw4egeyxahRfTj"
  #         export REDIS_URL=""
  #         TEST_FILES=$(circleci tests glob "tests/**/test_*.py" | circleci tests split --split-by=timings)
  #         coverage run --data-file=~/workspace/test-reports/.coverage.${RANDOM} -m pytest ${TEST_FILES}
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: |
  #         . ../venv/bin/activate
  #         flake8
